paleta_colorbrewer <- brewer.pal(8, "Set2")
# Criar o gráfico de barras de média de desconto por categoria de gênero
ggplot(media_desconto_por_grupo, aes(x = Categoria_Gênero, y = Media_Desconto, fill = Categoria_Gênero)) +
geom_bar(stat = "identity") +
labs(title = "Média de Desconto por Categoria de Gênero",
y = "Média de Desconto (%)",  # Título do eixo Y
fill = "Categoria de Gênero") +  # Título da legenda
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank()) +  # Remover o título do eixo X
scale_x_discrete(labels = NULL) +  # Remover rótulos do eixo X
scale_fill_manual(values = paleta_colorbrewer)  # Aplicar a paleta de cores manualmente
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(4, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar o gráfico de caixas dividido por categoria com a paleta de cores
ggplot(dados_filtrados, aes(y = Nota, fill = "Categoria Gênero")) +
geom_boxplot(color = "black") +
scale_fill_manual(values = paleta_colorbrewer) +  # Aplicar a paleta de cores do RColorBrewer manualmente
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(4, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar o gráfico de caixas dividido por categoria com a paleta de cores
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = paleta_colorbrewer) +  # Aplicar a paleta de cores do RColorBrewer manualmente
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = "blue", "Feminino Adulto" = "green",
"Masculino Infantil" = "red", "Feminino Infantil" = "purple")
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(ggplot2)
# Função para categorizar gêneros
categorizar_genero <- function(genero) {
if (grepl("Masculino", genero)) {
return("Masculino Adulto")
} else if (grepl("Feminino", genero)) {
return("Feminino Adulto")
} else if (grepl("Bebês|Meninos|menino", genero)) {
return("Masculino Infantil")
} else if (grepl("Meninas", genero)) {
return("Feminino Infantil")
} else if (grepl("Sem gênero", genero)) {
return("Sem Gênero Adulto")
} else if (grepl("Sem gênero infantil", genero)) {
return("Sem Gênero Infantil")
} else {
return("Outro")
}
}
# Aplicar a função de categorização aos dados
dados$Categoria_Gênero <- sapply(dados$Gênero, categorizar_genero)
# Ordenar a categoria de gênero
dados$Categoria_Gênero_ordenada <- reorder(
dados$Categoria_Gênero,
-table(dados$Categoria_Gênero)[dados$Categoria_Gênero]
)
library(RColorBrewer)
# Definir cores da paleta ColorBrewer Set1
cores_colorbrewer <- brewer.pal(8, "Set2")
# Criar o gráfico de barras ordenado com a paleta de cores em tons de Set1
ggplot(dados, aes(x = Categoria_Gênero_ordenada, fill = Categoria_Gênero_ordenada)) +
geom_bar() +
scale_fill_manual(values = cores_colorbrewer) +  # Aplicar a paleta de cores manualmente
labs(title = "Venda de Roupas por Gênero",
y = "Contagem",
fill = "Categoria de Gênero") +  # Definir o título da legenda
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",  # Definir a posição da legenda para o lado direito
legend.direction = "vertical",
axis.title.x = element_blank()) +  # Remover o título do eixo X
scale_x_discrete(labels = NULL)  # Remover rótulos do eixo X
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(4, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[1],
"Feminino Adulto" = paleta_colorbrewer[2],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[4])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(4, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[2],
"Feminino Adulto" = paleta_colorbrewer[2],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[5])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(4, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[2],
"Feminino Adulto" = paleta_colorbrewer[1],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[5])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(5, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[2],
"Feminino Adulto" = paleta_colorbrewer[1],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[5])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição das Notas dos Produtos", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(5, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[2],
"Feminino Adulto" = paleta_colorbrewer[1],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[5])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas
ggplot(dados_filtrados, aes(y = Nota, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição das Notas das Avaliações dos Produtos por Gênero", y = "Nota") +
facet_wrap(~Categoria_Gênero, scales = "free")
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(4, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[2],
"Feminino Adulto" = paleta_colorbrewer[1],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[5])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas e sem rótulos no eixo X
ggplot(dados_filtrados, aes(x = Categoria_Gênero, y = Preco_original, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição de Preço Original por Categoria de Gênero", y = "Preço Original") +
theme(axis.text.x = element_blank())  # Remover rótulos do eixo X
library(dplyr)
library(ggplot2)
library(RColorBrewer)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>% filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Escolher uma paleta de cores do RColorBrewer
paleta_colorbrewer <- brewer.pal(5, "Set2")  # Altere o número para escolher uma paleta diferente
# Criar um vetor de cores personalizado para cada categoria
cores_personalizadas <- c("Masculino Adulto" = paleta_colorbrewer[2],
"Feminino Adulto" = paleta_colorbrewer[1],
"Masculino Infantil" = paleta_colorbrewer[3],
"Feminino Infantil" = paleta_colorbrewer[5])
# Criar o gráfico de caixas dividido por categoria com as cores personalizadas e sem rótulos no eixo X
ggplot(dados_filtrados, aes(x = Categoria_Gênero, y = Preco_original, fill = Categoria_Gênero)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = cores_personalizadas) +  # Aplicar as cores personalizadas
labs(title = "Distribuição de Preço Original por Categoria de Gênero", y = "Preço Original") +
theme(axis.text.x = element_blank())  # Remover rótulos do eixo X
library(dplyr)
library(ggplot2)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>%
filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Calcular os três tipos de Material mais comprados para cada categoria de gênero
top_materiais <- dados_filtrados %>%
group_by(Categoria_Gênero, Material) %>%
summarise(Contagem = n()) %>%
arrange(desc(Contagem)) %>%
group_by(Categoria_Gênero) %>%
top_n(3, Contagem)
# Criar um gráfico de barras empilhadas
ggplot(top_materiais, aes(x = Categoria_Gênero, y = Contagem, fill = Material)) +
geom_bar(stat = "identity") +
labs(title = "Três Tipos de Material Mais Comprados por Categoria de Gênero", y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # Escolha uma paleta de cores adequada
library(dplyr)
library(ggplot2)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>%
filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Calcular os três tipos de Material mais comprados (excluindo "N/A") para cada categoria de gênero
top_materiais <- dados_filtrados %>%
filter(Material != "N/A") %>%  # Excluir entradas com "N/A"
group_by(Categoria_Gênero, Material) %>%
summarise(Contagem = n()) %>%
arrange(desc(Contagem)) %>%
group_by(Categoria_Gênero) %>%
top_n(3, Contagem)
# Criar um gráfico de barras empilhadas
ggplot(top_materiais, aes(x = Categoria_Gênero, y = Contagem, fill = Material)) +
geom_bar(stat = "identity") +
labs(title = "Três Tipos de Material Mais Comprados por Categoria de Gênero", y = "Contagem") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # Escolha uma paleta de cores adequada
library(dplyr)
library(ggplot2)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>%
filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Calcular a contagem de cada material para cada categoria de gênero
contagem_materiais <- dados_filtrados %>%
filter(Material != "N/A") %>%  # Excluir entradas com "N/A"
group_by(Categoria_Gênero, Material) %>%
summarise(Contagem = n()) %>%
arrange(desc(Contagem))
# Calcular a porcentagem de cada material dentro de cada categoria de gênero
contagem_materiais <- contagem_materiais %>%
group_by(Categoria_Gênero) %>%
mutate(Porcentagem = (Contagem / sum(Contagem)) * 100) %>%
top_n(3, Porcentagem)
# Criar um gráfico de barras empilhadas de porcentagem
ggplot(contagem_materiais, aes(x = Categoria_Gênero, y = Porcentagem, fill = Material)) +
geom_bar(stat = "identity") +
labs(title = "Três Tipos de Material Mais Comprados por Categoria de Gênero (Porcentagem)",
y = "Porcentagem (%)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # Escolha uma paleta de cores adequada
library(dplyr)
library(ggplot2)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>%
filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Calcular a contagem de cada material para cada categoria de gênero
contagem_materiais <- dados_filtrados %>%
filter(Material != "N/A") %>%  # Excluir entradas com "N/A"
group_by(Categoria_Gênero, Material) %>%
summarise(Contagem = n()) %>%
arrange(desc(Contagem))
# Calcular a porcentagem de cada material dentro de cada categoria de gênero
contagem_materiais <- contagem_materiais %>%
group_by(Categoria_Gênero) %>%
mutate(Porcentagem = (Contagem / sum(Contagem)) * 100) %>%
top_n(3, Porcentagem)
# Criar um gráfico de barras empilhadas de porcentagem
ggplot(contagem_materiais, aes(x = Categoria_Gênero, y = Porcentagem, fill = Material)) +
geom_bar(stat = "identity") +
labs(title = "Três Tipos de Material Mais Comprados por Categoria de Gênero (Porcentagem)",
y = "Porcentagem (%)", x = ("Categoria de Gênero")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # Escolha uma paleta de cores adequada
library(dplyr)
library(ggplot2)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>%
filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Calcular a contagem de cada material para cada categoria de gênero
contagem_materiais <- dados_filtrados %>%
filter(Material != "N/A") %>%  # Excluir entradas com "N/A"
group_by(Categoria_Gênero, Material) %>%
summarise(Contagem = n()) %>%
arrange(desc(Contagem))
# Calcular a porcentagem de cada material dentro de cada categoria de gênero
contagem_materiais <- contagem_materiais %>%
group_by(Categoria_Gênero) %>%
mutate(Porcentagem = (Contagem / sum(Contagem)) * 100) %>%
top_n(3, Porcentagem)
# Criar um gráfico de barras empilhadas de porcentagem
ggplot(contagem_materiais, aes(x = Categoria_Gênero, y = Porcentagem, fill = Material)) +
geom_bar(stat = "identity") +
labs(title = "Três Tipos de Material Mais Comprados por Categoria de Gênero",
y = "Porcentagem (%)", x = ("Categoria de Gênero")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # Escolha uma paleta de cores adequada
library(dplyr)
library(ggplot2)
# Filtrar os dados para as categorias desejadas
dados_filtrados <- dados %>%
filter(Categoria_Gênero %in% c("Masculino Adulto", "Feminino Adulto", "Masculino Infantil", "Feminino Infantil"))
# Calcular a contagem de cada material para cada categoria de gênero
contagem_materiais <- dados_filtrados %>%
filter(Material != "N/A") %>%  # Excluir entradas com "N/A"
group_by(Categoria_Gênero, Material) %>%
summarise(Contagem = n()) %>%
arrange(desc(Contagem))
# Calcular a porcentagem de cada material dentro de cada categoria de gênero
contagem_materiais <- contagem_materiais %>%
group_by(Categoria_Gênero) %>%
mutate(Porcentagem = (Contagem / sum(Contagem)) * 100) %>%
top_n(4, Porcentagem)
# Criar um gráfico de barras empilhadas de porcentagem
ggplot(contagem_materiais, aes(x = Categoria_Gênero, y = Porcentagem, fill = Material)) +
geom_bar(stat = "identity") +
labs(title = "Três Tipos de Material Mais Comprados por Categoria de Gênero",
y = "Porcentagem (%)", x = ("Categoria de Gênero")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set2")  # Escolha uma paleta de cores adequada
library(shiny)
# UI
ui <- fluidPage(
titlePanel("Aplicativo Shiny Básico"),
sidebarLayout(
sidebarPanel(
sliderInput("num", "Número de pontos:", 1, 100, 50)
),
mainPanel(
plotOutput("scatterplot")
)
)
)
# Servidor
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
plot(rnorm(input$num), rnorm(input$num))
})
}
ui <- fluidPage(
titlePanel("Aplicativo Shiny Básico"),
sidebarLayout(
sidebarPanel(
sliderInput("num", "Número de pontos:", 1, 100, 50)
),
mainPanel(
plotOutput("scatterplot")
)
)
)
library(shiny)
# UI
ui <- fluidPage(
titlePanel("Aplicativo Shiny Básico"),
sidebarLayout(
sidebarPanel(
sliderInput("num", "Número de pontos:", 1, 100, 50)
),
mainPanel(
plotOutput("scatterplot")
)
)
)
# Servidor
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
plot(rnorm(input$num), rnorm(input$num))
})
}
library(shiny)
server = function(input, output, session) {} # the server
ui = basicPage("our first basic app") # the user interface
shinyApp(ui = ui, server = server) # perform app launch
library(shiny)
server = function(input, output, session) {} # the server
ui = basicPage("our first basic app") # the user interface
shinyApp(ui = ui, server = server) # perform app launch
library(shiny)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Factor Y")
)
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write here"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
library(shiny)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
install.packages("shinythemes")
library(shiny)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
ui <- fluidPage(themeSelector(), # displaying the different themes, replace this line when publishing with theme = shinytheme("darkly")
titlePanel(strong("This is the STRONG tag on the Title")), # using strong as a direct tag
sidebarLayout(
sidebarPanel(
withTags(
div(
b("bold text: here you see a line break, a horizontal line and some code"),
br(),
hr(),
code("plot(lynx)")
))),
mainPanel(
tabsetPanel(
tabPanel("Weblinks with direct tag a", a(href="www.r-tutorials.com", "r-tutorials")),
tabPanel(tags$b("Using b for bold text"), tags$b("a bold text")),
tabPanel("Citations with the blockquote tag", tags$blockquote("R is Great", cite = "R Programmer"))
)
)
))
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
ui <- theme = shinytheme("darkly")
ui <- shinytheme("darkly")
library(shiny)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
ui <- shinytheme("darkly")
titlePanel(strong("This is the STRONG tag on the Title")), # using strong as a direct tag
library(shiny)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
ui <- theme = shinytheme("darkly"),
ui <- shinytheme("darkly"),
library(shiny)
server <- function(input, output, session) {}
library(shinythemes) # adding the shinythemese package
ui <- shinytheme("darkly"),
library(shiny)
library(shinythemes) # Adding the shinythemes package
ui <- fluidPage(
shinytheme("darkly"), # Corrected: shinytheme should be inside fluidPage
titlePanel(strong("This is the STRONG tag on the Title")), # Using strong as a direct tag
sidebarLayout(
sidebarPanel(
withTags(
div(
b("bold text: here you see a line break, a horizontal line and some code"),
br(),
hr(),
code("plot(lynx)")
)
)
),
mainPanel(
tabsetPanel(
tabPanel("Weblinks with direct tag a", a(href="http://www.r-tutorials.com", "r-tutorials")), # Corrected: Added "http://" to the URL
tabPanel(tags$b("Using b for bold text"), tags$b("a bold text")),
tabPanel("Citations with the blockquote tag", tags$blockquote("R is Great", cite = "R Programmer"))
)
)
)
)
server <- function(input, output, session) {
# Server logic if any
}
shinyApp(ui = ui, server = server)
runApp('projetos/ce302/trabalho')
